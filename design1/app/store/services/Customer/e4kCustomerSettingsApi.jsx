import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { gql } from 'graphql-request';

// Custom base query for GraphQL API
const graphqlBaseQuery = ({ baseUrl }) => async ({ body }) => {
  try {
    const response = await fetch(baseUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body),
    });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    const { data, errors } = await response.json();

    if (errors) {
      throw new Error(errors.map((error) => error.message).join(', '));
    }

    return { data };
  } catch (error) {
    return { error: { status: 500, data: error.message } };
  }
};

// Create API with Redux Toolkit
export const e4kCustomerSettingsApi = createApi({
  reducerPath: 'e4kCustomerSettingsApi',
  // baseQuery: graphqlBaseQuery({
  //   baseUrl: 'http://127.0.0.1:8000/customer/',
  // }),
  baseQuery : graphqlBaseQuery({ baseUrl : process.env.NEXT_PUBLIC_GRAPHQL_BASE_URL_Customer}),
  tagTypes: ['CustomerSettings'],
  endpoints: (builder) => ({
    getCustomerSettings: builder.query({
      query: ({ companyid, settingid, businessid }) => ({
        body: {
          query: gql`
            query GetCustomerSettings($businessid: String!, $companyid: String!, $settingid: String!) {
              E4kTblcustomersettings(businessid: $businessid, companyid: $companyid, settingid: $settingid) 
              
            }
          `,
          variables: { companyid, settingid, businessid },
        },
      }),
      providesTags: (result) =>
        result
          ? [
              ...result.E4kTblcustomersettings.map(({ settingid }) => ({
                type: 'CustomerSettings',
                id: settingid,
              })),
              { type: 'CustomerSettings', id: 'LIST' },
            ]
          : [{ type: 'CustomerSettings', id: 'LIST' }],
    }),
    updateCustomerSetValue: builder.mutation({
      query: ({ businessid, companyid, settingid, value }) => ({
        body: {
          query: gql`
            mutation UpdateCustomerSetValue($businessid: String!, $companyid: String!, $settingid: String!, $value: String!) {
              E4kTblCustomerSetValueUpdate(businessid: $businessid, companyid: $companyid, settingid: $settingid, value: $value) {
                customersetvalues
              }
            }
          `,
          variables: { businessid, companyid, settingid, value },
        },
      }),
      invalidatesTags: (result, error, { settingid }) => [
        { type: 'CustomerSettings', id: settingid },
        { type: 'CustomerSettings', id: 'LIST' },
      ],
    }),
    
  }),
});

// Export hooks generated by createApi
export const { useGetCustomerSettingsQuery ,useUpdateCustomerSetValueMutation } = e4kCustomerSettingsApi;
